@using CJG.Web.External.Areas.Int.Models

@model IntakeManagementViewModel
@{
    ViewBag.Title = "Budget Overview";
}

<div>
    <h2>@ViewBag.Title</h2>
    @using (Html.BeginForm("IntakeManagementDashboard", "Intake", FormMethod.Get))
    {
        <div class="form__group-set">
            <div class="form__group">
                <label class="form__label" for="@Html.IdFor(model => model.FiscalYearId)">Fiscal Year</label>
                <div class="form__control">
                    <div class="selectmenu">
                        @Html.DropDownListFor(x => x.FiscalYearId, new SelectList(Model.FiscalYears, "Key", "Value"), new { onchange = "this.form.submit();" })
                    </div>
                </div>
            </div>
           
            <div class="form__group" style="width: auto;">
                <label class="form__label" for="@Html.IdFor(model => model.GrantProgramId)">Grant Program</label>
                <div class="form__control">
                    <div class="selectmenu">
                        @Html.DropDownListFor(x => x.GrantProgramId, new SelectList(Model.GrantPrograms, "Key", "Value"), new { onchange = "this.form.submit();" })
                    </div>
                </div>
            </div>
            @if (Model.GrantStreams.Any()) 
            { 
                <div class="form__group" style="width: auto; margin-left: 20px;">
                    <label class="form__label" for="@Html.IdFor(model => model.GrantStreamId)">Grant Stream</label>

                    <div class="form__control">
                        <div class="selectmenu">
                            @Html.DropDownListFor(x => x.GrantStreamId, new SelectList(Model.GrantStreams, "Key", "Value"), new { onchange = "this.form.submit();" })
                        </div>

                        @Html.ActionLink("Refresh", "IntakeManagementDashboard", new
                        {
                            fiscalYearId = Model.FiscalYearId,
                            grantProgramId = Model.GrantProgramId,
                            grantStreamId = Model.GrantStreamId,
                            trainingPeriodId = Model.TrainingPeriodId
                        }, new { @class = "btn btn--primary margin-left-gutter" })
                    </div>
                </div>
            }
        </div>
    }

    @if (Model.GrantStreams.Any()) 
    {
        <div class="table--horizontal-wrapper budget-overview-container">
            <table id="intake-management-dashboard" class="table--horizontal table--datatable-horizontal nowrap table--intake-management-dashboard" cellspacing="0" width="100%">
                <thead>
                <tr>
                    <th colspan="1" class="fixed-column">Training Period</th>
                    @foreach (var period in Model.TrainingPeriods) 
                    {
                        <td colspan="2">@period.TrainingPeriodName</td>
                    }
                    <td colspan="2">FY Totals</td>
                </tr>
                <tr>
                    <th colspan="1" class="fixed-column">Start and End</th>
                    @foreach (var period in Model.TrainingPeriods) 
                    {
                        <td colspan="2">@Html.Raw(period.DateRange.Replace(Environment.NewLine, "<br />"))</td>
                    }
                    <td colspan="2"></td>
                </tr>
                <tr class="row-status">
                    <th colspan="1" class="fixed-column">Status</th>
                    @foreach (var period in Model.TrainingPeriods) 
                    {
                        <td colspan="2">@(!string.IsNullOrWhiteSpace(period.Status) ? period.Status : "---")</td>
                    }
                    <td colspan="2"></td>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <th colspan="1" class="fixed-column">Applications</th>
                    @foreach (var trainingPeriod in Model.TrainingPeriods) 
                    {
                        <th class="text-align-right" colspan="1">Number</th>
                        <th colspan="1" class="text-align-right">Value</th>
                    }
                    <th class="text-align-right" colspan="1">FY Number</th>
                    <th colspan="1" class="text-align-right">FY Value</th>
                </tr>
                @foreach (var state in Model.StateNames)
                {
                    var summedIntakes = Model.TrainingPeriods.SelectMany(s => s.GrantOpeningIntakes.Where(g => g.Key == state.Key)).ToList();
                    var fiscalTotalCount = summedIntakes.Select(s => s.Value).Sum(i => i.Number);
                    var fiscalTotalValue = summedIntakes.Select(s => s.Value).Sum(i => i.Value);
                    <tr>
                        <th colspan="1" class="indent-cell fixed-column">@state.Value</th>
                        @foreach (var trainingPeriod in Model.TrainingPeriods)
                        {
                            <td class="text-align-right" colspan="1">
                                @trainingPeriod.GrantOpeningIntakes[state.Key].Number
                            </td>
                            <td class="text-align-right" colspan="1">
                                @trainingPeriod.GrantOpeningIntakes[state.Key].Value.ToDollarCurrencyString(0)
                            </td>
                        }
                        <td class="text-align-right" colspan="1">
                            @fiscalTotalCount
                        </td>
                        <td class="text-align-right" colspan="1">
                            @fiscalTotalValue.ToDollarCurrencyString(0)
                        </td>
                    </tr>
                }
                <tr>
                    <th colspan="1" class="fixed-column">Total Application Intake</th>
                    @foreach (var trainingPeriod in Model.TrainingPeriods) {
                        <td class="text-align-right" colspan="1">@trainingPeriod.TotalApplicationsIntake</td>
                        <td class="text-align-right" colspan="1">@trainingPeriod.TotalApplicationsIntakeAmt.ToDollarCurrencyString(0)</td>
                    }
                    <td class="text-align-right" colspan="1">@Model.TrainingPeriods.Sum(s => s.TotalApplicationsIntake)</td>
                    <td class="text-align-right" colspan="1">@Model.TrainingPeriods.Sum(s => s.TotalApplicationsIntakeAmt).ToDollarCurrencyString(0)</td>
                </tr>
                </tbody>
            </table>
        </div>
        <br />
            
        <p>
            * This includes all applications under assessment as well as any that are still waiting for assessment<br />
            ** Includes all funds committed by Ministry for current agreements in any status
        </p>
    }
</div>
